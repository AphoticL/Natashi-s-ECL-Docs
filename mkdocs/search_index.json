{
    "docs": [
        {
            "location": "/",
            "text": "Natashi's ECL Syntax Documentation\n\n\nThis documentation was compiled by \nNatashi\n, a furry being who is obsessed with shaders.\n\n\nContributors\n\n\nReferences\n\n\n\n\nNutzer\n\n\nDark Kitsune\n\n\nRi Ri\n\n\nThe Chinese Touhou Wiki\n\n\n\n\nMarkdown Editor (This webpage)\n\n\n\n\nYuugen",
            "title": "Home"
        },
        {
            "location": "/#natashis-ecl-syntax-documentation",
            "text": "This documentation was compiled by  Natashi , a furry being who is obsessed with shaders.",
            "title": "Natashi's ECL Syntax Documentation"
        },
        {
            "location": "/#contributors",
            "text": "",
            "title": "Contributors"
        },
        {
            "location": "/#references",
            "text": "Nutzer  Dark Kitsune  Ri Ri  The Chinese Touhou Wiki",
            "title": "References"
        },
        {
            "location": "/#markdown-editor-this-webpage",
            "text": "Yuugen",
            "title": "Markdown Editor (This webpage)"
        },
        {
            "location": "/basics/",
            "text": "Here are the basic syntaxes you might want to know first before going into the codes.\n\n\nformless\n\n\nPushes a variable to either the float or integer stack, depending on the type of variable used.\n\n\nExamples:\n\n\n1.0f;       // Pushes a float with the value of 1.0 to the float stack.\n6;          // Pushes an int with the value of 6 to the integer stack.\n-6;         // Negative values are invalid.\n-34.355f;   // Same goes to floats.\n\n\n\n\nDanmakufu Equivalent: \nAbsent\n; stacks do not exist in dmf.\n\n\n[]\n\n\nPops a variable with the specified order from a stack to be used.\n\n\nExamples:\n\n\n[-1]        // Pops the topmost variable from the integer stack.\n[-2]        // Pops the second variable from the integer stack.\n[-1.0f]     // Pops the topmost variable from the float stack.\n[-3.0f]     // Pops the third variable from the float stack.\n[-1.6f]     // Invalid.\n\n\n\n\nDanmakufu Equivalent: \nAbsent\n; stacks do not exist in dmf.\n\n\nanim\n\n\nUsed as a preprocessor, imports \nANM\n scripts.\n\n\nExamples:\n\n\nanim{ \"enemy.anm\"; }\nanim{ \"enemy.anm\"; \"st06enm.anm\"; }\n\n\n\n\nDanmakufu Equivalent: \nAbsent\n\n\necli\n\n\nUsed as a preprocessor, includes \nECL\n scripts.\n\n\nExamples:\n\n\necli{ \"default.ecl\"; };\necli{ \"default.ecl\"; \"st06bs.ecl\" };\n\n\n\n\nDanmakufu Equivalent: \n#include\n\n\nsub\n\n\nDefines a \nsubroutine\n. Rounded brackets cannot be omitted. Parameters are defined with only spaces seperating them.\n\n\nExamples:\n\n\nsub Something(){}\nsub Something( A B C D E ){}\nsub Something( count graphic wait way ){}\n\n\n\n\nDanmakufu Equivalent: \ntask\n\n\ntask Something(){}\ntask Something(A, B, C, D, E){}\n\n\n\n\nvar\n\n\nDefines local \nvariables\n. Must be present at the start of all subroutines, but does not need to always create a variable.\n\nVariables\n are defined in series, with only spaces seperating them.\n\n\nExamples:\n\n\nvar A;\nvar A B C;\n\n\n\n\nDanmakufu Equivalent: \nlet\n\n\nlet A;\nlet A, B, C;\n\n\n\n\n!\n\n\nPushes variable(s) to the top of the stack based on difficulty level. (E = easy, N = normal, H = hard, L = lunatic, O = overdrive, * = all difficulties)\n\n\nExamples:\n\n\n!E\n    60;\n!N\n    40;\n!HL\n    20;\n!*\n    ins_23([-1]);\n\n\n\n\nDanmakufu Equivalent: \nAbsent\n; difficulties aren't hardcoded into dmf.\n\n\nxx:\n\n\nThere are two cases:\n\n\nWhen the \nxx\n is an integer:\n\n\nTime label, tells the engine to execute the following block of code once an xx amount of \nframes\n has passed after subroutine activation.\n\n\nExamples:\n\n\n60:         // 60 frames delay.\n3:          // 3 frames delay.\n99999:      // 99999 frames delay.\n-30:        // Invalid.\n20.41:      // Invalid.\n\n\n\n\nDanmakufu Equivalent: \nAbsent\n; labels do not exist in dmf.\n\n\nWhen the \nxx\n is a string:\n\n\nLabel for jumps and gotos. Label names generated for decompiled ECL scripts are in \n\"[Subroutine name]_[Numerical ID]\"\n.\n\n\nExamples:\n\n\nBoss1_at_239:\nWhateverLabelThisIs:\n\n\n\n\nDanmakufu Equivalent: \nAbsent\n; labels do not exist in dmf.\n\n\n$\n\n\nSignifies an integer variable.\n\n\nExamples:\n\n\n$A;         // Pushes an integer variable to top of the int stack.\n$B = 8;     // Writes an integer to a variable.\n\n\n\n\nDanmakufu Equivalent: \nAbsent\n; as stacks and real number types do not exist in dmf.\n\n\n%\n\n\nSignifies an float variable.\n\n\nExamples:\n\n\n%A;         // Pushes a float variable to top of the int stack.\n%B = -18.55;     // Writes a float to a variable.\n\n\n\n\nDanmakufu Equivalent: \nAbsent\n; as stacks and real number types do not exist in dmf.\n\n\n_SS\n\n\nPasses an integer as an argument of a subroutine.\n\n\n_ff\n\n\nPasses a float as an argument of a subroutine.\n\n\n_fS\n\n\nConverts an integer to a float when passing an argument to a subroutine.\n\n\n_Sf\n\n\nConverts a float to an integer when passing an argument to a subroutine.\n\n\n_S\n\n\nConvert to an integer.\n\n\nExamples:\n\n\n_S(6.0f);       // Converted to 6.  \n_S(89.24f);     // Converted to 89.\n_S(%A);         // A's value is temporarily converted to an int, but A's actual value remains the same as a float.\n\n\n\n\nDanmakufu Equivalent: \nround\n();\n\n\n_f\n\n\nConverts to a float.\n\n\nExamples:\n\n\n_f(192);        // Converted to 192.0f.\n_f($A);         // A's value is temporarily converted to a float, but A's actual value remains the same as an int.\n\n\n\n\nDanmakufu Equivalent: \ntruncate\n();\n\n\n[-99xx]\n\n\nA build-in register that returns an int. An in-depth list is currently under construction.\n\n\nExamples:\n\n\n[-9903];\n[9903];         // Invalid.\n[-10000];       // Highest register.\n\n\n\n\n[-99xx.0f]\n\n\nA build-in register that returns a float. An in-depth list is currently under construction.\n\n\nExamples:\n\n\n[-9998.0f];\n[9938.0f];      // Invalid.",
            "title": "Basic Syntax"
        },
        {
            "location": "/basics/#formless",
            "text": "Pushes a variable to either the float or integer stack, depending on the type of variable used.  Examples:  1.0f;       // Pushes a float with the value of 1.0 to the float stack.\n6;          // Pushes an int with the value of 6 to the integer stack.\n-6;         // Negative values are invalid.\n-34.355f;   // Same goes to floats.  Danmakufu Equivalent:  Absent ; stacks do not exist in dmf.",
            "title": "formless"
        },
        {
            "location": "/basics/#_1",
            "text": "Pops a variable with the specified order from a stack to be used.  Examples:  [-1]        // Pops the topmost variable from the integer stack.\n[-2]        // Pops the second variable from the integer stack.\n[-1.0f]     // Pops the topmost variable from the float stack.\n[-3.0f]     // Pops the third variable from the float stack.\n[-1.6f]     // Invalid.  Danmakufu Equivalent:  Absent ; stacks do not exist in dmf.",
            "title": "[]"
        },
        {
            "location": "/basics/#anim",
            "text": "Used as a preprocessor, imports  ANM  scripts.  Examples:  anim{ \"enemy.anm\"; }\nanim{ \"enemy.anm\"; \"st06enm.anm\"; }  Danmakufu Equivalent:  Absent",
            "title": "anim"
        },
        {
            "location": "/basics/#ecli",
            "text": "Used as a preprocessor, includes  ECL  scripts.  Examples:  ecli{ \"default.ecl\"; };\necli{ \"default.ecl\"; \"st06bs.ecl\" };  Danmakufu Equivalent:  #include",
            "title": "ecli"
        },
        {
            "location": "/basics/#sub",
            "text": "Defines a  subroutine . Rounded brackets cannot be omitted. Parameters are defined with only spaces seperating them.  Examples:  sub Something(){}\nsub Something( A B C D E ){}\nsub Something( count graphic wait way ){}  Danmakufu Equivalent:  task  task Something(){}\ntask Something(A, B, C, D, E){}",
            "title": "sub"
        },
        {
            "location": "/basics/#var",
            "text": "Defines local  variables . Must be present at the start of all subroutines, but does not need to always create a variable. Variables  are defined in series, with only spaces seperating them.  Examples:  var A;\nvar A B C;  Danmakufu Equivalent:  let  let A;\nlet A, B, C;",
            "title": "var"
        },
        {
            "location": "/basics/#_2",
            "text": "Pushes variable(s) to the top of the stack based on difficulty level. (E = easy, N = normal, H = hard, L = lunatic, O = overdrive, * = all difficulties)  Examples:  !E\n    60;\n!N\n    40;\n!HL\n    20;\n!*\n    ins_23([-1]);  Danmakufu Equivalent:  Absent ; difficulties aren't hardcoded into dmf.",
            "title": "!"
        },
        {
            "location": "/basics/#xx",
            "text": "There are two cases:",
            "title": "xx:"
        },
        {
            "location": "/basics/#when-the-xx-is-an-integer",
            "text": "Time label, tells the engine to execute the following block of code once an xx amount of  frames  has passed after subroutine activation.  Examples:  60:         // 60 frames delay.\n3:          // 3 frames delay.\n99999:      // 99999 frames delay.\n-30:        // Invalid.\n20.41:      // Invalid.  Danmakufu Equivalent:  Absent ; labels do not exist in dmf.",
            "title": "When the xx is an integer:"
        },
        {
            "location": "/basics/#when-the-xx-is-a-string",
            "text": "Label for jumps and gotos. Label names generated for decompiled ECL scripts are in  \"[Subroutine name]_[Numerical ID]\" .  Examples:  Boss1_at_239:\nWhateverLabelThisIs:  Danmakufu Equivalent:  Absent ; labels do not exist in dmf.",
            "title": "When the xx is a string:"
        },
        {
            "location": "/basics/#_3",
            "text": "Signifies an integer variable.  Examples:  $A;         // Pushes an integer variable to top of the int stack.\n$B = 8;     // Writes an integer to a variable.  Danmakufu Equivalent:  Absent ; as stacks and real number types do not exist in dmf.",
            "title": "$"
        },
        {
            "location": "/basics/#_4",
            "text": "Signifies an float variable.  Examples:  %A;         // Pushes a float variable to top of the int stack.\n%B = -18.55;     // Writes a float to a variable.  Danmakufu Equivalent:  Absent ; as stacks and real number types do not exist in dmf.",
            "title": "%"
        },
        {
            "location": "/basics/#_ss",
            "text": "Passes an integer as an argument of a subroutine.",
            "title": "_SS"
        },
        {
            "location": "/basics/#_ff",
            "text": "Passes a float as an argument of a subroutine.",
            "title": "_ff"
        },
        {
            "location": "/basics/#_fs",
            "text": "Converts an integer to a float when passing an argument to a subroutine.",
            "title": "_fS"
        },
        {
            "location": "/basics/#_sf",
            "text": "Converts a float to an integer when passing an argument to a subroutine.",
            "title": "_Sf"
        },
        {
            "location": "/basics/#_s",
            "text": "Convert to an integer.  Examples:  _S(6.0f);       // Converted to 6.  \n_S(89.24f);     // Converted to 89.\n_S(%A);         // A's value is temporarily converted to an int, but A's actual value remains the same as a float.  Danmakufu Equivalent:  round ();",
            "title": "_S"
        },
        {
            "location": "/basics/#_f",
            "text": "Converts to a float.  Examples:  _f(192);        // Converted to 192.0f.\n_f($A);         // A's value is temporarily converted to a float, but A's actual value remains the same as an int.  Danmakufu Equivalent:  truncate ();",
            "title": "_f"
        },
        {
            "location": "/basics/#-99xx",
            "text": "A build-in register that returns an int. An in-depth list is currently under construction.  Examples:  [-9903];\n[9903];         // Invalid.\n[-10000];       // Highest register.",
            "title": "[-99xx]"
        },
        {
            "location": "/basics/#-99xx0f",
            "text": "A build-in register that returns a float. An in-depth list is currently under construction.  Examples:  [-9998.0f];\n[9938.0f];      // Invalid.",
            "title": "[-99xx.0f]"
        }
    ]
}